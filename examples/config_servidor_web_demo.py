#!/usr/bin/env python3
"""
Demonstra√ß√£o do sistema de configura√ß√£o do servidor web integrado.

Este script mostra como usar o sistema de configura√ß√£o flex√≠vel,
incluindo cria√ß√£o, valida√ß√£o, carregamento e diagn√≥stico de configura√ß√µes.
"""

import json
import os
import tempfile
from pathlib import Path

# Importar m√≥dulos do sistema de configura√ß√£o
from services.web_server import (
    ConfiguracaoServidorWeb,
    ConfigManager,
    obter_configuracao,
    diagnosticar_configuracao,
    gerar_relatorio_configuracao,
    criar_configuracao_desenvolvimento,
    criar_configuracao_producao,
    verificar_porta_disponivel,
    encontrar_porta_disponivel
)


def demonstrar_configuracao_basica():
    """Demonstra uso b√°sico da configura√ß√£o."""
    print("=" * 60)
    print("DEMONSTRA√á√ÉO: Configura√ß√£o B√°sica")
    print("=" * 60)
    
    # Criar configura√ß√£o padr√£o
    config = ConfiguracaoServidorWeb()
    print(f"‚úÖ Configura√ß√£o padr√£o criada")
    print(f"   Porta: {config.porta_preferencial}")
    print(f"   Host: {config.host}")
    print(f"   Debug: {config.modo_debug}")
    print(f"   CORS: {config.cors_habilitado}")
    print()
    
    # Criar configura√ß√£o personalizada
    config_custom = ConfiguracaoServidorWeb(
        porta_preferencial=8085,
        modo_debug=True,
        nivel_log="DEBUG",
        cors_origens=["http://localhost:3000", "http://127.0.0.1:3000"]
    )
    print(f"‚úÖ Configura√ß√£o personalizada criada")
    print(f"   Porta: {config_custom.porta_preferencial}")
    print(f"   Debug: {config_custom.modo_debug}")
    print(f"   N√≠vel Log: {config_custom.nivel_log}")
    print(f"   CORS Origens: {config_custom.cors_origens}")
    print()


def demonstrar_validacao():
    """Demonstra valida√ß√£o de configura√ß√µes."""
    print("=" * 60)
    print("DEMONSTRA√á√ÉO: Valida√ß√£o de Configura√ß√µes")
    print("=" * 60)
    
    # Configura√ß√£o v√°lida
    try:
        config_valida = ConfiguracaoServidorWeb(
            porta_preferencial=8080,
            host="localhost",
            modo_debug=False
        )
        print("‚úÖ Configura√ß√£o v√°lida criada com sucesso")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
    
    # Configura√ß√£o inv√°lida - porta fora do intervalo
    try:
        config_invalida = ConfiguracaoServidorWeb(
            porta_preferencial=9000,  # Fora do intervalo padr√£o 8080-8090
            porta_minima=8080,
            porta_maxima=8090
        )
        print("‚ùå Configura√ß√£o inv√°lida foi aceita (n√£o deveria)")
    except Exception as e:
        print(f"‚úÖ Configura√ß√£o inv√°lida rejeitada corretamente: {type(e).__name__}")
    
    # Configura√ß√£o inv√°lida - host vazio
    try:
        config_host_vazio = ConfiguracaoServidorWeb(host="")
        print("‚ùå Host vazio foi aceito (n√£o deveria)")
    except Exception as e:
        print(f"‚úÖ Host vazio rejeitado corretamente: {type(e).__name__}")
    
    print()


def demonstrar_arquivo_json():
    """Demonstra salvamento e carregamento de arquivos JSON."""
    print("=" * 60)
    print("DEMONSTRA√á√ÉO: Arquivos JSON")
    print("=" * 60)
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        arquivo_temp = f.name
    
    try:
        # Criar e salvar configura√ß√£o
        config_original = ConfiguracaoServidorWeb(
            porta_preferencial=8085,
            modo_debug=True,
            nivel_log="DEBUG",
            cors_origens=["http://localhost:3000"]
        )
        
        config_original.salvar_arquivo(arquivo_temp)
        print(f"‚úÖ Configura√ß√£o salva em: {arquivo_temp}")
        
        # Carregar configura√ß√£o
        config_carregada = ConfiguracaoServidorWeb.carregar_arquivo(arquivo_temp)
        print(f"‚úÖ Configura√ß√£o carregada do arquivo")
        print(f"   Porta: {config_carregada.porta_preferencial}")
        print(f"   Debug: {config_carregada.modo_debug}")
        print(f"   N√≠vel Log: {config_carregada.nivel_log}")
        
        # Mostrar conte√∫do do arquivo
        with open(arquivo_temp, 'r', encoding='utf-8') as f:
            conteudo = json.load(f)
        
        print(f"\nüìÑ Conte√∫do do arquivo JSON (primeiras 5 chaves):")
        for i, (chave, valor) in enumerate(conteudo.items()):
            if i >= 5:
                print("   ...")
                break
            print(f"   {chave}: {valor}")
        
    finally:
        os.unlink(arquivo_temp)
        print(f"üóëÔ∏è  Arquivo tempor√°rio removido")
    
    print()


def demonstrar_config_manager():
    """Demonstra uso do ConfigManager."""
    print("=" * 60)
    print("DEMONSTRA√á√ÉO: ConfigManager")
    print("=" * 60)
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
        arquivo_temp = f.name
    
    try:
        # Criar manager
        manager = ConfigManager(
            caminho_config=arquivo_temp,
            monitorar_mudancas=False  # Desabilitar para demo
        )
        
        print(f"‚úÖ ConfigManager criado")
        
        # Obter configura√ß√£o inicial
        config = manager.obter_configuracao()
        print(f"   Porta inicial: {config.porta_preferencial}")
        
        # Atualizar configura√ß√£o
        sucesso = manager.atualizar_configuracao(
            porta_preferencial=8085,
            modo_debug=True,
            nivel_log="DEBUG"
        )
        
        if sucesso:
            print(f"‚úÖ Configura√ß√£o atualizada com sucesso")
            config_atualizada = manager.obter_configuracao()
            print(f"   Nova porta: {config_atualizada.porta_preferencial}")
            print(f"   Debug: {config_atualizada.modo_debug}")
        else:
            print(f"‚ùå Falha ao atualizar configura√ß√£o")
        
        # Informa√ß√µes do manager
        info = manager.obter_info_configuracao()
        print(f"\nüìä Informa√ß√µes do ConfigManager:")
        for chave, valor in info.items():
            print(f"   {chave}: {valor}")
        
    finally:
        os.unlink(arquivo_temp)
        print(f"üóëÔ∏è  Arquivo tempor√°rio removido")
    
    print()


def demonstrar_diagnostico():
    """Demonstra diagn√≥stico de configura√ß√µes."""
    print("=" * 60)
    print("DEMONSTRA√á√ÉO: Diagn√≥stico de Configura√ß√µes")
    print("=" * 60)
    
    # Configura√ß√£o para diagn√≥stico
    config = ConfiguracaoServidorWeb(
        porta_preferencial=8080,
        modo_debug=True,
        cors_origens=["*"],  # Pode gerar aviso de seguran√ßa
        permitir_directory_listing=True,  # Pode gerar aviso de seguran√ßa
        intervalo_sincronizacao=0.05  # Pode gerar aviso de performance
    )
    
    # Executar diagn√≥stico
    diagnostico = diagnosticar_configuracao(config)
    
    print(f"üìã Resultado do diagn√≥stico:")
    print(f"   Configura√ß√£o v√°lida: {diagnostico['configuracao_valida']}")
    print(f"   Erros: {len(diagnostico['erros'])}")
    print(f"   Avisos: {len(diagnostico['avisos'])}")
    print(f"   Informa√ß√µes: {len(diagnostico['informacoes'])}")
    
    if diagnostico['avisos']:
        print(f"\n‚ö†Ô∏è  Avisos encontrados:")
        for aviso in diagnostico['avisos']:
            print(f"   - {aviso}")
    
    if diagnostico['informacoes']:
        print(f"\n‚ÑπÔ∏è  Informa√ß√µes:")
        for info in diagnostico['informacoes']:
            print(f"   - {info}")
    
    print()


def demonstrar_configuracoes_predefinidas():
    """Demonstra configura√ß√µes predefinidas."""
    print("=" * 60)
    print("DEMONSTRA√á√ÉO: Configura√ß√µes Predefinidas")
    print("=" * 60)
    
    # Configura√ß√£o de desenvolvimento
    config_dev = criar_configuracao_desenvolvimento()
    print(f"üîß Configura√ß√£o de Desenvolvimento:")
    print(f"   Debug: {config_dev.modo_debug}")
    print(f"   N√≠vel Log: {config_dev.nivel_log}")
    print(f"   Cache: {config_dev.cache_habilitado}")
    print(f"   Intervalo Sync: {config_dev.intervalo_sincronizacao}s")
    
    # Configura√ß√£o de produ√ß√£o
    config_prod = criar_configuracao_producao()
    print(f"\nüöÄ Configura√ß√£o de Produ√ß√£o:")
    print(f"   Debug: {config_prod.modo_debug}")
    print(f"   N√≠vel Log: {config_prod.nivel_log}")
    print(f"   Cache: {config_prod.cache_habilitado}")
    print(f"   Intervalo Sync: {config_prod.intervalo_sincronizacao}s")
    print(f"   Compress√£o: {config_prod.compressao_habilitada}")
    
    print()


def demonstrar_utilitarios_rede():
    """Demonstra utilit√°rios de rede."""
    print("=" * 60)
    print("DEMONSTRA√á√ÉO: Utilit√°rios de Rede")
    print("=" * 60)
    
    # Verificar porta espec√≠fica
    porta_teste = 8080
    disponivel = verificar_porta_disponivel(porta_teste)
    print(f"üîç Porta {porta_teste} dispon√≠vel: {disponivel}")
    
    # Encontrar porta dispon√≠vel
    porta_encontrada = encontrar_porta_disponivel(8080, 8090)
    if porta_encontrada:
        print(f"‚úÖ Porta dispon√≠vel encontrada: {porta_encontrada}")
    else:
        print(f"‚ùå Nenhuma porta dispon√≠vel no intervalo 8080-8090")
    
    # Testar algumas portas altas (mais prov√°vel de estarem dispon√≠veis)
    porta_alta = encontrar_porta_disponivel(60000, 60010)
    if porta_alta:
        print(f"‚úÖ Porta alta dispon√≠vel: {porta_alta}")
    
    print()


def demonstrar_relatorio_completo():
    """Demonstra gera√ß√£o de relat√≥rio completo."""
    print("=" * 60)
    print("DEMONSTRA√á√ÉO: Relat√≥rio Completo")
    print("=" * 60)
    
    # Criar configura√ß√£o com alguns problemas para demonstrar
    config = ConfiguracaoServidorWeb(
        porta_preferencial=8080,
        modo_debug=False,
        cors_origens=["*"],  # Aviso de seguran√ßa
        permitir_directory_listing=True,  # Aviso de seguran√ßa
        max_tamanho_upload=200 * 1024 * 1024,  # Aviso de performance (200MB)
        diretorio_html="web_content_inexistente"  # Pode gerar erro
    )
    
    # Gerar relat√≥rio
    relatorio = gerar_relatorio_configuracao(config)
    print(relatorio)


def main():
    """Fun√ß√£o principal da demonstra√ß√£o."""
    print("üöÄ DEMONSTRA√á√ÉO DO SISTEMA DE CONFIGURA√á√ÉO DO SERVIDOR WEB")
    print("=" * 80)
    print()
    
    try:
        demonstrar_configuracao_basica()
        demonstrar_validacao()
        demonstrar_arquivo_json()
        demonstrar_config_manager()
        demonstrar_diagnostico()
        demonstrar_configuracoes_predefinidas()
        demonstrar_utilitarios_rede()
        demonstrar_relatorio_completo()
        
        print("üéâ Demonstra√ß√£o conclu√≠da com sucesso!")
        print("\nüí° Dicas:")
        print("   - Use ConfigManager para gerenciamento autom√°tico de configura√ß√µes")
        print("   - Execute diagn√≥sticos regulares para identificar problemas")
        print("   - Use configura√ß√µes predefinidas como ponto de partida")
        print("   - Monitore portas dispon√≠veis antes de iniciar o servidor")
        
    except Exception as e:
        print(f"‚ùå Erro durante demonstra√ß√£o: {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()