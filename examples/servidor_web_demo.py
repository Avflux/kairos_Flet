#!/usr/bin/env python3
"""
Demonstra√ß√£o completa do Sistema de Servidor Web Integrado.

Este exemplo mostra como usar todos os componentes do sistema:
- WebServerManager para servidor HTTP local
- DataSyncManager para sincroniza√ß√£o de dados
- WebViewComponent para exibi√ß√£o integrada
- TopSidebarContainer com WebView habilitado

Execute este script para ver o sistema funcionando na pr√°tica.
"""

import flet as ft
import json
import time
import threading
import tempfile
import shutil
from pathlib import Path
from datetime import datetime
from typing import Optional

# Importar componentes do sistema
from services.web_server.server_manager import WebServerManager
from services.web_server.sync_manager import DataSyncManager
from services.web_server.data_provider import JSONDataProvider
from services.web_server.models import ConfiguracaoServidorWeb, DadosTopSidebar
from services.web_server.config import (
    criar_configuracao_desenvolvimento,
    diagnosticar_configuracao,
    gerar_relatorio_configuracao
)
from views.components.webview_component import WebViewComponent
from views.components.top_sidebar_container import TopSidebarContainer


class ServidorWebDemo:
    """Classe principal da demonstra√ß√£o."""
    
    def __init__(self):
        """Inicializa a demonstra√ß√£o."""
        self.temp_dir = None
        self.server_manager = None
        self.sync_manager = None
        self.webview_component = None
        self.container = None
        self.dados_simulados = {
            "contador": 0,
            "time_tracker": {
                "tempo_decorrido": 0,
                "esta_executando": False,
                "esta_pausado": False,
                "projeto_atual": "Demonstra√ß√£o WebView"
            },
            "flowchart": {
                "progresso": 0.0,
                "estagio_atual": "Inicializa√ß√£o",
                "total_estagios": 5
            },
            "notificacoes": {
                "total": 0,
                "nao_lidas": 0,
                "lista": []
            }
        }
        self.simulacao_ativa = False
        self.thread_simulacao = None
    
    def criar_estrutura_web(self):
        """Cria estrutura de arquivos web para demonstra√ß√£o."""
        print("üìÅ Criando estrutura de arquivos web...")
        
        # Criar diret√≥rios
        css_dir = Path(self.temp_dir) / "css"
        js_dir = Path(self.temp_dir) / "js"
        data_dir = Path(self.temp_dir) / "data"
        
        css_dir.mkdir(exist_ok=True)
        js_dir.mkdir(exist_ok=True)
        data_dir.mkdir(exist_ok=True)
        
        # P√°gina principal HTML
        html_content = """<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Demonstra√ß√£o Servidor Web Integrado</title>
    <link rel="stylesheet" href="css/styles.css">
</head>
<body>
    <div id="app">
        <header>
            <h1>üöÄ Demonstra√ß√£o WebView Integrado</h1>
            <div id="status-conexao" class="conectado">Conectado</div>
            <div id="timestamp">Carregando...</div>
        </header>
        
        <main>
            <div class="grid-container">
                <section class="card" id="time-tracker">
                    <h2>‚è±Ô∏è Rastreamento de Tempo</h2>
                    <div class="metric-large" id="tempo-decorrido">00:00:00</div>
                    <div class="info-row">
                        <span class="label">Projeto:</span>
                        <span id="projeto-atual">Nenhum projeto</span>
                    </div>
                    <div class="info-row">
                        <span class="label">Status:</span>
                        <span id="status-execucao" class="status-parado">Parado</span>
                    </div>
                </section>
                
                <section class="card" id="flowchart">
                    <h2>üìä Progresso do Workflow</h2>
                    <div class="progress-container">
                        <div class="progress-bar">
                            <div id="progresso-atual" class="progress-fill" style="width: 0%"></div>
                        </div>
                        <div class="progress-text" id="progresso-percentual">0%</div>
                    </div>
                    <div class="info-row">
                        <span class="label">Est√°gio:</span>
                        <span id="estagio-atual">Nenhum workflow ativo</span>
                    </div>
                    <div class="info-row">
                        <span class="label">Total:</span>
                        <span id="total-estagios">0 est√°gios</span>
                    </div>
                </section>
                
                <section class="card" id="notificacoes">
                    <h2>üîî Notifica√ß√µes</h2>
                    <div class="metric-container">
                        <div class="metric-item">
                            <div class="metric-value" id="total-notificacoes">0</div>
                            <div class="metric-label">Total</div>
                        </div>
                        <div class="metric-item">
                            <div class="metric-value" id="nao-lidas" class="highlight">0</div>
                            <div class="metric-label">N√£o Lidas</div>
                        </div>
                    </div>
                    <div id="lista-notificacoes" class="notifications-list">
                        <div class="no-notifications">Nenhuma notifica√ß√£o</div>
                    </div>
                </section>
                
                <section class="card" id="estatisticas">
                    <h2>üìà Estat√≠sticas da Demo</h2>
                    <div class="info-row">
                        <span class="label">Atualiza√ß√µes:</span>
                        <span id="contador-atualizacoes">0</span>
                    </div>
                    <div class="info-row">
                        <span class="label">Lat√™ncia M√©dia:</span>
                        <span id="latencia-media">0ms</span>
                    </div>
                    <div class="info-row">
                        <span class="label">√öltima Sync:</span>
                        <span id="ultima-sincronizacao">Nunca</span>
                    </div>
                    <div class="info-row">
                        <span class="label">Status Sistema:</span>
                        <span id="status-sistema" class="status-ok">OK</span>
                    </div>
                </section>
            </div>
        </main>
        
        <footer>
            <p>Demonstra√ß√£o do Sistema de Servidor Web Integrado</p>
            <p>Dados atualizados automaticamente via sincroniza√ß√£o JSON</p>
        </footer>
    </div>
    
    <script src="js/sync.js"></script>
    <script src="js/main.js"></script>
</body>
</html>"""
        
        (Path(self.temp_dir) / "index.html").write_text(html_content, encoding='utf-8')
        
        # CSS Styles
        css_content = """/* Estilos para demonstra√ß√£o do WebView */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: #333;
    min-height: 100vh;
}

#app {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

header {
    background: rgba(255, 255, 255, 0.95);
    padding: 20px;
    border-radius: 12px;
    margin-bottom: 20px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
}

header h1 {
    color: #4a5568;
    font-size: 1.8rem;
    font-weight: 600;
}

#status-conexao {
    padding: 8px 16px;
    border-radius: 20px;
    font-weight: 500;
    font-size: 0.9rem;
    transition: all 0.3s ease;
}

#status-conexao.conectado {
    background: #48bb78;
    color: white;
}

#status-conexao.erro-conexao {
    background: #f56565;
    color: white;
    animation: pulse 2s infinite;
}

#timestamp {
    color: #718096;
    font-size: 0.9rem;
}

.grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

.card {
    background: rgba(255, 255, 255, 0.95);
    padding: 24px;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
}

.card h2 {
    color: #4a5568;
    margin-bottom: 16px;
    font-size: 1.3rem;
    font-weight: 600;
}

.metric-large {
    font-size: 2.5rem;
    font-weight: 700;
    color: #2d3748;
    margin-bottom: 16px;
    font-family: 'Courier New', monospace;
}

.metric-container {
    display: flex;
    gap: 20px;
    margin-bottom: 16px;
}

.metric-item {
    text-align: center;
    flex: 1;
}

.metric-value {
    font-size: 2rem;
    font-weight: 700;
    color: #2d3748;
    margin-bottom: 4px;
}

.metric-value.highlight {
    color: #e53e3e;
}

.metric-label {
    font-size: 0.9rem;
    color: #718096;
    font-weight: 500;
}

.info-row {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
    padding: 8px 0;
    border-bottom: 1px solid #e2e8f0;
}

.info-row:last-child {
    border-bottom: none;
    margin-bottom: 0;
}

.label {
    font-weight: 600;
    color: #4a5568;
}

.status-executando {
    color: #38a169;
    font-weight: 600;
}

.status-pausado {
    color: #ed8936;
    font-weight: 600;
}

.status-parado {
    color: #718096;
    font-weight: 600;
}

.status-ok {
    color: #38a169;
    font-weight: 600;
}

.progress-container {
    margin-bottom: 16px;
}

.progress-bar {
    width: 100%;
    height: 12px;
    background: #e2e8f0;
    border-radius: 6px;
    overflow: hidden;
    margin-bottom: 8px;
}

.progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #48bb78, #38a169);
    transition: width 0.5s ease;
    border-radius: 6px;
}

.progress-text {
    text-align: center;
    font-weight: 600;
    color: #4a5568;
}

.notifications-list {
    max-height: 200px;
    overflow-y: auto;
}

.notificacao {
    padding: 12px;
    margin-bottom: 8px;
    border-radius: 8px;
    border-left: 4px solid #4299e1;
    background: #ebf8ff;
    transition: all 0.2s ease;
}

.notificacao.nao-lida {
    border-left-color: #e53e3e;
    background: #fed7d7;
}

.notificacao.lida {
    border-left-color: #38a169;
    background: #f0fff4;
    opacity: 0.8;
}

.notificacao .titulo {
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 4px;
}

.notificacao .data {
    font-size: 0.8rem;
    color: #718096;
}

.no-notifications {
    text-align: center;
    color: #a0aec0;
    font-style: italic;
    padding: 20px;
}

footer {
    background: rgba(255, 255, 255, 0.95);
    padding: 20px;
    border-radius: 12px;
    text-align: center;
    color: #718096;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

footer p {
    margin-bottom: 4px;
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

/* Responsividade */
@media (max-width: 768px) {
    #app {
        padding: 10px;
    }
    
    header {
        flex-direction: column;
        gap: 10px;
        text-align: center;
    }
    
    header h1 {
        font-size: 1.5rem;
    }
    
    .grid-container {
        grid-template-columns: 1fr;
    }
    
    .metric-large {
        font-size: 2rem;
    }
    
    .metric-container {
        flex-direction: column;
        gap: 10px;
    }
}

/* Anima√ß√µes suaves */
.card, .metric-value, .progress-fill, .status-conexao {
    transition: all 0.3s ease;
}

/* Efeitos de hover */
.card:hover .metric-value {
    transform: scale(1.05);
}

/* Indicadores visuais */
.tem-notificacoes {
    animation: bounce 1s infinite;
}

@keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-3px); }
    60% { transform: translateY(-2px); }
}
"""
        
        (css_dir / "styles.css").write_text(css_content, encoding='utf-8')
        
        # JavaScript para sincroniza√ß√£o
        js_sync_content = """// Sistema de sincroniza√ß√£o para demonstra√ß√£o
class DemoSyncManager {
    constructor() {
        this.dados = {};
        this.ultimaAtualizacao = null;
        this.intervaloSync = 1000; // 1 segundo
        this.contadorAtualizacoes = 0;
        this.latencias = [];
        this.iniciarSincronizacao();
        
        console.log('üöÄ DemoSyncManager inicializado');
    }
    
    iniciarSincronizacao() {
        setInterval(() => {
            this.buscarDados();
        }, this.intervaloSync);
        
        // Primeira busca imediata
        this.buscarDados();
    }
    
    async buscarDados() {
        const startTime = performance.now();
        
        try {
            const response = await fetch('/data/sync.json?t=' + Date.now());
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const dados = await response.json();
            const endTime = performance.now();
            const latencia = endTime - startTime;
            
            this.latencias.push(latencia);
            if (this.latencias.length > 10) {
                this.latencias.shift(); // Manter apenas as √∫ltimas 10
            }
            
            if (dados.timestamp !== this.ultimaAtualizacao) {
                this.dados = dados.dados || {};
                this.ultimaAtualizacao = dados.timestamp;
                this.contadorAtualizacoes++;
                this.atualizarInterface();
                
                console.log('üìä Dados sincronizados:', {
                    timestamp: dados.timestamp,
                    latencia: `${latencia.toFixed(1)}ms`,
                    contador: this.contadorAtualizacoes
                });
            }
            
            this.mostrarConexaoOk();
            
        } catch (error) {
            console.error('‚ùå Erro na sincroniza√ß√£o:', error);
            this.mostrarErroConexao();
        }
    }
    
    atualizarInterface() {
        // Atualizar timestamp
        const timestampElement = document.getElementById('timestamp');
        if (timestampElement) {
            timestampElement.textContent = `√öltima atualiza√ß√£o: ${new Date().toLocaleTimeString('pt-BR')}`;
        }
        
        // Atualizar time tracker
        if (this.dados.time_tracker) {
            this.atualizarTimeTracker(this.dados.time_tracker);
        }
        
        // Atualizar flowchart
        if (this.dados.flowchart) {
            this.atualizarFlowchart(this.dados.flowchart);
        }
        
        // Atualizar notifica√ß√µes
        if (this.dados.notificacoes) {
            this.atualizarNotificacoes(this.dados.notificacoes);
        }
        
        // Atualizar estat√≠sticas
        this.atualizarEstatisticas();
    }
    
    atualizarTimeTracker(dados) {
        const tempoElement = document.getElementById('tempo-decorrido');
        const projetoElement = document.getElementById('projeto-atual');
        const statusElement = document.getElementById('status-execucao');
        
        if (tempoElement) {
            tempoElement.textContent = this.formatarTempo(dados.tempo_decorrido || 0);
        }
        
        if (projetoElement) {
            projetoElement.textContent = dados.projeto_atual || 'Nenhum projeto';
        }
        
        if (statusElement) {
            let status, className;
            
            if (dados.esta_executando) {
                status = 'Executando';
                className = 'status-executando';
            } else if (dados.esta_pausado) {
                status = 'Pausado';
                className = 'status-pausado';
            } else {
                status = 'Parado';
                className = 'status-parado';
            }
            
            statusElement.textContent = status;
            statusElement.className = className;
        }
    }
    
    atualizarFlowchart(dados) {
        const progressoElement = document.getElementById('progresso-atual');
        const percentualElement = document.getElementById('progresso-percentual');
        const estagioElement = document.getElementById('estagio-atual');
        const totalElement = document.getElementById('total-estagios');
        
        const progresso = dados.progresso || 0;
        
        if (progressoElement) {
            progressoElement.style.width = `${progresso}%`;
        }
        
        if (percentualElement) {
            percentualElement.textContent = `${progresso.toFixed(1)}%`;
        }
        
        if (estagioElement) {
            estagioElement.textContent = dados.estagio_atual || 'Nenhum workflow ativo';
        }
        
        if (totalElement) {
            const total = dados.total_estagios || 0;
            totalElement.textContent = `${total} est√°gio${total !== 1 ? 's' : ''}`;
        }
    }
    
    atualizarNotificacoes(dados) {
        const totalElement = document.getElementById('total-notificacoes');
        const naoLidasElement = document.getElementById('nao-lidas');
        const listaElement = document.getElementById('lista-notificacoes');
        
        const total = dados.total || 0;
        const naoLidas = dados.nao_lidas || 0;
        
        if (totalElement) {
            totalElement.textContent = total;
        }
        
        if (naoLidasElement) {
            naoLidasElement.textContent = naoLidas;
            naoLidasElement.className = naoLidas > 0 ? 'metric-value highlight tem-notificacoes' : 'metric-value';
        }
        
        if (listaElement) {
            const lista = dados.lista || [];
            
            if (lista.length === 0) {
                listaElement.innerHTML = '<div class="no-notifications">Nenhuma notifica√ß√£o</div>';
            } else {
                listaElement.innerHTML = lista
                    .slice(0, 5) // Mostrar apenas as 5 mais recentes
                    .map(notif => `
                        <div class="notificacao ${notif.lida ? 'lida' : 'nao-lida'}">
                            <div class="titulo">${this.escapeHtml(notif.titulo || 'Sem t√≠tulo')}</div>
                            <div class="data">${this.formatarData(notif.data || new Date().toISOString())}</div>
                        </div>
                    `).join('');
            }
        }
    }
    
    atualizarEstatisticas() {
        const contadorElement = document.getElementById('contador-atualizacoes');
        const latenciaElement = document.getElementById('latencia-media');
        const ultimaSyncElement = document.getElementById('ultima-sincronizacao');
        const statusSistemaElement = document.getElementById('status-sistema');
        
        if (contadorElement) {
            contadorElement.textContent = this.contadorAtualizacoes;
        }
        
        if (latenciaElement && this.latencias.length > 0) {
            const latenciaMedia = this.latencias.reduce((a, b) => a + b, 0) / this.latencias.length;
            latenciaElement.textContent = `${latenciaMedia.toFixed(1)}ms`;
        }
        
        if (ultimaSyncElement) {
            ultimaSyncElement.textContent = new Date().toLocaleTimeString('pt-BR');
        }
        
        if (statusSistemaElement) {
            statusSistemaElement.textContent = 'OK';
            statusSistemaElement.className = 'status-ok';
        }
    }
    
    formatarTempo(segundos) {
        const horas = Math.floor(segundos / 3600);
        const minutos = Math.floor((segundos % 3600) / 60);
        const segs = segundos % 60;
        
        return `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}:${segs.toString().padStart(2, '0')}`;
    }
    
    formatarData(timestamp) {
        try {
            return new Date(timestamp).toLocaleString('pt-BR', {
                day: '2-digit',
                month: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch (e) {
            return 'Data inv√°lida';
        }
    }
    
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    mostrarConexaoOk() {
        const statusElement = document.getElementById('status-conexao');
        if (statusElement) {
            statusElement.textContent = 'Conectado';
            statusElement.className = 'conectado';
        }
    }
    
    mostrarErroConexao() {
        const statusElement = document.getElementById('status-conexao');
        if (statusElement) {
            statusElement.textContent = 'Erro de Conex√£o';
            statusElement.className = 'erro-conexao';
        }
    }
}

// Inicializar quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', () => {
    console.log('üåê P√°gina carregada, inicializando sincroniza√ß√£o...');
    window.demoSyncManager = new DemoSyncManager();
});

// Adicionar alguns logs √∫teis para debug
window.addEventListener('beforeunload', () => {
    console.log('üëã P√°gina sendo fechada');
});

// Detectar mudan√ßas de visibilidade
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        console.log('üëÅÔ∏è P√°gina oculta');
    } else {
        console.log('üëÅÔ∏è P√°gina vis√≠vel');
    }
});
"""
        
        (js_dir / "sync.js").write_text(js_sync_content, encoding='utf-8')
        
        # JavaScript principal
        js_main_content = """// JavaScript principal para demonstra√ß√£o
console.log('üéØ Script principal carregado');

// Adicionar interatividade extra
document.addEventListener('DOMContentLoaded', () => {
    // Adicionar efeitos visuais aos cards
    const cards = document.querySelectorAll('.card');
    cards.forEach((card, index) => {
        // Anima√ß√£o de entrada escalonada
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            card.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 100);
    });
    
    // Adicionar tooltip para elementos com informa√ß√µes
    const infoElements = document.querySelectorAll('[data-tooltip]');
    infoElements.forEach(element => {
        element.addEventListener('mouseenter', showTooltip);
        element.addEventListener('mouseleave', hideTooltip);
    });
    
    // Adicionar funcionalidade de clique nos cards
    cards.forEach(card => {
        card.addEventListener('click', () => {
            card.style.transform = 'scale(0.98)';
            setTimeout(() => {
                card.style.transform = '';
            }, 150);
        });
    });
    
    console.log('‚ú® Interatividade adicionada aos elementos');
});

function showTooltip(event) {
    const tooltip = document.createElement('div');
    tooltip.className = 'tooltip';
    tooltip.textContent = event.target.getAttribute('data-tooltip');
    tooltip.style.cssText = `
        position: absolute;
        background: #2d3748;
        color: white;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 0.8rem;
        z-index: 1000;
        pointer-events: none;
        opacity: 0;
        transition: opacity 0.2s ease;
    `;
    
    document.body.appendChild(tooltip);
    
    const rect = event.target.getBoundingClientRect();
    tooltip.style.left = rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2) + 'px';
    tooltip.style.top = rect.top - tooltip.offsetHeight - 8 + 'px';
    
    setTimeout(() => {
        tooltip.style.opacity = '1';
    }, 10);
    
    event.target._tooltip = tooltip;
}

function hideTooltip(event) {
    if (event.target._tooltip) {
        event.target._tooltip.remove();
        delete event.target._tooltip;
    }
}

// Fun√ß√£o para mostrar notifica√ß√£o tempor√°ria
function mostrarNotificacao(mensagem, tipo = 'info') {
    const notificacao = document.createElement('div');
    notificacao.className = `notificacao-temp ${tipo}`;
    notificacao.textContent = mensagem;
    notificacao.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${tipo === 'error' ? '#f56565' : tipo === 'success' ? '#48bb78' : '#4299e1'};
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        z-index: 1001;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
        max-width: 300px;
        word-wrap: break-word;
    `;
    
    document.body.appendChild(notificacao);
    
    // Animar entrada
    setTimeout(() => {
        notificacao.style.opacity = '1';
        notificacao.style.transform = 'translateX(0)';
    }, 10);
    
    // Remover ap√≥s 3 segundos
    setTimeout(() => {
        notificacao.style.opacity = '0';
        notificacao.style.transform = 'translateX(100%)';
        setTimeout(() => {
            notificacao.remove();
        }, 300);
    }, 3000);
}

// Detectar erros JavaScript e mostrar notifica√ß√£o
window.addEventListener('error', (event) => {
    console.error('‚ùå Erro JavaScript:', event.error);
    mostrarNotificacao('Erro detectado no JavaScript', 'error');
});

// Detectar problemas de rede
window.addEventListener('online', () => {
    console.log('üåê Conex√£o restaurada');
    mostrarNotificacao('Conex√£o com a internet restaurada', 'success');
});

window.addEventListener('offline', () => {
    console.log('üì° Conex√£o perdida');
    mostrarNotificacao('Conex√£o com a internet perdida', 'error');
});

// Adicionar atalhos de teclado √∫teis
document.addEventListener('keydown', (event) => {
    // Ctrl+R ou F5 para recarregar
    if ((event.ctrlKey && event.key === 'r') || event.key === 'F5') {
        console.log('üîÑ Recarregando p√°gina...');
        mostrarNotificacao('Recarregando p√°gina...', 'info');
    }
    
    // Ctrl+Shift+I para mostrar informa√ß√µes de debug
    if (event.ctrlKey && event.shiftKey && event.key === 'I') {
        event.preventDefault();
        console.log('üîç Informa√ß√µes de debug:', {
            syncManager: window.demoSyncManager,
            dados: window.demoSyncManager?.dados,
            atualizacoes: window.demoSyncManager?.contadorAtualizacoes,
            latencias: window.demoSyncManager?.latencias
        });
        mostrarNotificacao('Informa√ß√µes de debug no console', 'info');
    }
});

console.log('üéâ JavaScript principal inicializado com sucesso');
"""
        
        (js_dir / "main.js").write_text(js_main_content, encoding='utf-8')
        
        # Arquivo de sincroniza√ß√£o inicial
        sync_data = {
            "dados": self.dados_simulados,
            "timestamp": datetime.now().isoformat(),
            "versao": 1,
            "fonte": "ServidorWebDemo"
        }
        
        (data_dir / "sync.json").write_text(
            json.dumps(sync_data, indent=2, ensure_ascii=False),
            encoding='utf-8'
        )
        
        print("‚úÖ Estrutura de arquivos web criada com sucesso!")
    
    def configurar_sistema(self):
        """Configura o sistema de servidor web."""
        print("‚öôÔ∏è Configurando sistema de servidor web...")
        
        # Criar configura√ß√£o de desenvolvimento
        self.config = criar_configuracao_desenvolvimento()
        self.config.porta_preferencial = 8090  # Porta espec√≠fica para demo
        self.config.portas_alternativas = [8091, 8092, 8093]
        self.config.diretorio_html = self.temp_dir
        self.config.arquivo_sincronizacao = str(Path(self.temp_dir) / "data" / "sync.json")
        self.config.intervalo_debounce = 0.1  # Resposta r√°pida para demo
        self.config.modo_debug = True
        
        # Executar diagn√≥stico
        print("\nüîç Executando diagn√≥stico da configura√ß√£o...")
        diagnostico = diagnosticar_configuracao(self.config)
        
        print(f"   Configura√ß√£o v√°lida: {'‚úÖ' if diagnostico['configuracao_valida'] else '‚ùå'}")
        print(f"   Erros: {len(diagnostico['erros'])}")
        print(f"   Avisos: {len(diagnostico['avisos'])}")
        
        if diagnostico['avisos']:
            for aviso in diagnostico['avisos'][:3]:  # Mostrar apenas os 3 primeiros
                print(f"   ‚ö†Ô∏è {aviso}")
        
        print("‚úÖ Sistema configurado!")
    
    def inicializar_componentes(self):
        """Inicializa todos os componentes do sistema."""
        print("üöÄ Inicializando componentes...")
        
        # 1. Inicializar servidor web
        print("   üì° Iniciando servidor web...")
        self.server_manager = WebServerManager(self.config)
        self.url_servidor = self.server_manager.iniciar_servidor()
        print(f"   ‚úÖ Servidor iniciado em: {self.url_servidor}")
        
        # 2. Inicializar sincroniza√ß√£o
        print("   üîÑ Configurando sincroniza√ß√£o...")
        json_provider = JSONDataProvider(arquivo_json=self.config.arquivo_sincronizacao)
        self.sync_manager = DataSyncManager(json_provider)
        print("   ‚úÖ Sincroniza√ß√£o configurada!")
        
        # 3. Atualiza√ß√£o inicial dos dados
        print("   üìä Enviando dados iniciais...")
        self.sync_manager.atualizar_dados(self.dados_simulados)
        time.sleep(0.2)  # Aguardar sincroniza√ß√£o
        print("   ‚úÖ Dados iniciais sincronizados!")
        
        print("üéâ Todos os componentes inicializados com sucesso!")
    
    def iniciar_simulacao_dados(self):
        """Inicia simula√ß√£o de dados em tempo real."""
        print("üé≠ Iniciando simula√ß√£o de dados em tempo real...")
        
        self.simulacao_ativa = True
        self.thread_simulacao = threading.Thread(target=self._loop_simulacao, daemon=True)
        self.thread_simulacao.start()
        
        print("‚úÖ Simula√ß√£o iniciada!")
    
    def _loop_simulacao(self):
        """Loop principal da simula√ß√£o de dados."""
        contador_ciclos = 0
        
        while self.simulacao_ativa:
            try:
                contador_ciclos += 1
                
                # Atualizar time tracker
                if contador_ciclos % 2 == 0:  # A cada 2 ciclos
                    self.dados_simulados["time_tracker"]["tempo_decorrido"] += 1
                    
                    # Alternar status ocasionalmente
                    if contador_ciclos % 20 == 0:
                        self.dados_simulados["time_tracker"]["esta_executando"] = not self.dados_simulados["time_tracker"]["esta_executando"]
                
                # Atualizar progresso do workflow
                if contador_ciclos % 5 == 0:  # A cada 5 ciclos
                    progresso_atual = self.dados_simulados["flowchart"]["progresso"]
                    novo_progresso = min(100, progresso_atual + 1.5)
                    self.dados_simulados["flowchart"]["progresso"] = novo_progresso
                    
                    # Atualizar est√°gio baseado no progresso
                    if novo_progresso < 20:
                        self.dados_simulados["flowchart"]["estagio_atual"] = "Inicializa√ß√£o"
                    elif novo_progresso < 40:
                        self.dados_simulados["flowchart"]["estagio_atual"] = "Desenvolvimento"
                    elif novo_progresso < 60:
                        self.dados_simulados["flowchart"]["estagio_atual"] = "Testes"
                    elif novo_progresso < 80:
                        self.dados_simulados["flowchart"]["estagio_atual"] = "Revis√£o"
                    else:
                        self.dados_simulados["flowchart"]["estagio_atual"] = "Finaliza√ß√£o"
                
                # Adicionar notifica√ß√µes ocasionalmente
                if contador_ciclos % 15 == 0:  # A cada 15 ciclos
                    nova_notificacao = {
                        "id": len(self.dados_simulados["notificacoes"]["lista"]) + 1,
                        "titulo": f"Notifica√ß√£o de Demo #{contador_ciclos // 15}",
                        "data": datetime.now().isoformat(),
                        "lida": False
                    }
                    
                    self.dados_simulados["notificacoes"]["lista"].insert(0, nova_notificacao)
                    self.dados_simulados["notificacoes"]["total"] += 1
                    self.dados_simulados["notificacoes"]["nao_lidas"] += 1
                    
                    # Manter apenas as 10 notifica√ß√µes mais recentes
                    if len(self.dados_simulados["notificacoes"]["lista"]) > 10:
                        self.dados_simulados["notificacoes"]["lista"] = self.dados_simulados["notificacoes"]["lista"][:10]
                
                # Marcar algumas notifica√ß√µes como lidas ocasionalmente
                if contador_ciclos % 25 == 0 and self.dados_simulados["notificacoes"]["nao_lidas"] > 0:
                    for notif in self.dados_simulados["notificacoes"]["lista"]:
                        if not notif["lida"] and len([n for n in self.dados_simulados["notificacoes"]["lista"] if not n["lida"]]) > 1:
                            notif["lida"] = True
                            self.dados_simulados["notificacoes"]["nao_lidas"] -= 1
                            break
                
                # Atualizar contador geral
                self.dados_simulados["contador"] = contador_ciclos
                
                # Sincronizar dados
                self.sync_manager.atualizar_dados(self.dados_simulados)
                
                # Aguardar pr√≥ximo ciclo
                time.sleep(1.0)  # 1 segundo entre atualiza√ß√µes
                
            except Exception as e:
                print(f"‚ùå Erro na simula√ß√£o: {e}")
                time.sleep(1.0)
    
    def parar_simulacao(self):
        """Para a simula√ß√£o de dados."""
        print("‚èπÔ∏è Parando simula√ß√£o...")
        self.simulacao_ativa = False
        
        if self.thread_simulacao and self.thread_simulacao.is_alive():
            self.thread_simulacao.join(timeout=2.0)
        
        print("‚úÖ Simula√ß√£o parada!")
    
    def criar_aplicacao_flet(self, page: ft.Page):
        """Cria a aplica√ß√£o Flet com WebView integrado."""
        print("üé® Criando aplica√ß√£o Flet...")
        
        # Configurar p√°gina
        page.title = "Demonstra√ß√£o - Servidor Web Integrado"
        page.theme_mode = ft.ThemeMode.LIGHT
        page.padding = 20
        page.bgcolor = ft.colors.GREY_100
        
        # Criar WebView component
        self.webview_component = WebViewComponent(
            page=page,
            url_servidor=self.url_servidor,
            modo_debug=True
        )
        
        # Criar controles da demonstra√ß√£o
        controles = ft.Column([
            ft.Text(
                "üöÄ Demonstra√ß√£o do Sistema de Servidor Web Integrado",
                size=24,
                weight=ft.FontWeight.BOLD,
                color=ft.colors.BLUE_800
            ),
            ft.Text(
                f"Servidor ativo em: {self.url_servidor}",
                size=14,
                color=ft.colors.GREY_700
            ),
            ft.Divider(),
            
            ft.Row([
                ft.ElevatedButton(
                    "üîÑ Recarregar WebView",
                    on_click=lambda _: self.webview_component.recarregar(),
                    bgcolor=ft.colors.BLUE_500,
                    color=ft.colors.WHITE
                ),
                ft.ElevatedButton(
                    "üìä For√ßar Sincroniza√ß√£o",
                    on_click=lambda _: self._forcar_sincronizacao(),
                    bgcolor=ft.colors.GREEN_500,
                    color=ft.colors.WHITE
                ),
                ft.ElevatedButton(
                    "üé≠ Toggle Simula√ß√£o",
                    on_click=lambda _: self._toggle_simulacao(),
                    bgcolor=ft.colors.ORANGE_500,
                    color=ft.colors.WHITE
                ),
            ], wrap=True),
            
            ft.Divider(),
            
            # Container para o WebView
            ft.Container(
                content=self.webview_component,
                width=1000,
                height=600,
                border=ft.border.all(2, ft.colors.GREY_400),
                border_radius=12,
                bgcolor=ft.colors.WHITE,
                shadow=ft.BoxShadow(
                    spread_radius=1,
                    blur_radius=10,
                    color=ft.colors.with_opacity(0.3, ft.colors.GREY_400),
                    offset=ft.Offset(0, 4)
                )
            )
        ], spacing=10)
        
        page.add(controles)
        page.update()
        
        print("‚úÖ Aplica√ß√£o Flet criada!")
    
    def _forcar_sincronizacao(self):
        """For√ßa uma sincroniza√ß√£o imediata."""
        print("üîÑ For√ßando sincroniza√ß√£o...")
        self.dados_simulados["timestamp_forcado"] = datetime.now().isoformat()
        self.sync_manager.atualizar_dados(self.dados_simulados)
        print("‚úÖ Sincroniza√ß√£o for√ßada!")
    
    def _toggle_simulacao(self):
        """Alterna o estado da simula√ß√£o."""
        if self.simulacao_ativa:
            self.parar_simulacao()
        else:
            self.iniciar_simulacao_dados()
    
    def executar_demo(self):
        """Executa a demonstra√ß√£o completa."""
        print("üé¨ INICIANDO DEMONSTRA√á√ÉO DO SERVIDOR WEB INTEGRADO")
        print("=" * 60)
        
        try:
            # 1. Criar diret√≥rio tempor√°rio
            self.temp_dir = tempfile.mkdtemp(prefix="servidor_web_demo_")
            print(f"üìÅ Diret√≥rio tempor√°rio: {self.temp_dir}")
            
            # 2. Criar estrutura web
            self.criar_estrutura_web()
            
            # 3. Configurar sistema
            self.configurar_sistema()
            
            # 4. Inicializar componentes
            self.inicializar_componentes()
            
            # 5. Iniciar simula√ß√£o
            self.iniciar_simulacao_dados()
            
            # 6. Criar aplica√ß√£o Flet
            print("\nüé® Iniciando aplica√ß√£o Flet...")
            print("   (Uma janela do navegador ser√° aberta)")
            print("   Pressione Ctrl+C para parar a demonstra√ß√£o")
            
            ft.app(
                target=self.criar_aplicacao_flet,
                view=ft.WEB_BROWSER,
                port=8000,
                web_renderer=ft.WebRenderer.HTML
            )
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Demonstra√ß√£o interrompida pelo usu√°rio")
        except Exception as e:
            print(f"\n‚ùå Erro durante demonstra√ß√£o: {e}")
            import traceback
            traceback.print_exc()
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Limpa recursos utilizados."""
        print("\nüßπ Limpando recursos...")
        
        # Parar simula√ß√£o
        if self.simulacao_ativa:
            self.parar_simulacao()
        
        # Parar servidor
        if self.server_manager:
            self.server_manager.parar_servidor()
            print("   ‚úÖ Servidor web parado")
        
        # Finalizar sincroniza√ß√£o
        if self.sync_manager:
            self.sync_manager.finalizar()
            print("   ‚úÖ Sincroniza√ß√£o finalizada")
        
        # Remover diret√≥rio tempor√°rio
        if self.temp_dir and Path(self.temp_dir).exists():
            shutil.rmtree(self.temp_dir)
            print(f"   ‚úÖ Diret√≥rio tempor√°rio removido: {self.temp_dir}")
        
        print("üéâ Limpeza conclu√≠da!")


def main():
    """Fun√ß√£o principal."""
    print("üöÄ DEMONSTRA√á√ÉO COMPLETA DO SISTEMA DE SERVIDOR WEB INTEGRADO")
    print("=" * 70)
    print()
    print("Esta demonstra√ß√£o mostra:")
    print("  ‚Ä¢ Servidor web local com arquivos HTML/CSS/JS")
    print("  ‚Ä¢ Sincroniza√ß√£o de dados em tempo real via JSON")
    print("  ‚Ä¢ WebView integrado ao Flet")
    print("  ‚Ä¢ Interface responsiva e interativa")
    print("  ‚Ä¢ Simula√ß√£o de dados din√¢micos")
    print()
    print("Instru√ß√µes:")
    print("  ‚Ä¢ Uma janela do navegador ser√° aberta automaticamente")
    print("  ‚Ä¢ Os dados ser√£o atualizados automaticamente a cada segundo")
    print("  ‚Ä¢ Use os bot√µes para controlar a demonstra√ß√£o")
    print("  ‚Ä¢ Pressione Ctrl+C para parar")
    print()
    input("Pressione Enter para continuar...")
    print()
    
    # Executar demonstra√ß√£o
    demo = ServidorWebDemo()
    demo.executar_demo()


if __name__ == '__main__':
    main()