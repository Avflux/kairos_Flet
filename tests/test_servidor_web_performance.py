"""
Testes de performance para o sistema de servidor web integrado.

Este m√≥dulo cont√©m testes espec√≠ficos para medir e validar a performance
do sistema de sincroniza√ß√£o, lat√™ncia de comunica√ß√£o e uso de recursos.
"""

import unittest
import time
import threading
import tempfile
import shutil
import json
import psutil
import os
from pathlib import Path
from unittest.mock import Mock, patch
from datetime import datetime
from statistics import mean, median, stdev

# Importar componentes do sistema
from services.web_server.server_manager import WebServerManager
from services.web_server.sync_manager import DataSyncManager
from services.web_server.data_provider import JSONDataProvider
from services.web_server.models import ConfiguracaoServidorWeb
from views.components.webview_component import WebViewComponent


class PerformanceTestCase(unittest.TestCase):
    """Classe base para testes de performance."""
    
    def measure_execution_time(self, func, *args, **kwargs):
        """Mede o tempo de execu√ß√£o de uma fun√ß√£o."""
        start_time = time.perf_counter()
        result = func(*args, **kwargs)
        end_time = time.perf_counter()
        execution_time = end_time - start_time
        return result, execution_time
    
    def measure_multiple_executions(self, func, iterations=10, *args, **kwargs):
        """Mede m√∫ltiplas execu√ß√µes e retorna estat√≠sticas."""
        times = []
        results = []
        
        for _ in range(iterations):
            result, exec_time = self.measure_execution_time(func, *args, **kwargs)
            times.append(exec_time)
            results.append(result)
        
        stats = {
            'times': times,
            'results': results,
            'mean': mean(times),
            'median': median(times),
            'min': min(times),
            'max': max(times),
            'std_dev': stdev(times) if len(times) > 1 else 0,
            'total': sum(times)
        }
        
        return stats
    
    def assert_performance_threshold(self, execution_time, threshold, message=""):
        """Verifica se o tempo de execu√ß√£o est√° dentro do limite."""
        self.assertLess(
            execution_time,
            threshold,
            f"Limite de performance excedido: {execution_time:.4f}s > {threshold}s. {message}"
        )
    
    def measure_memory_usage(self, func, *args, **kwargs):
        """Mede o uso de mem√≥ria durante execu√ß√£o de uma fun√ß√£o."""
        process = psutil.Process(os.getpid())
        
        # Mem√≥ria inicial
        mem_before = process.memory_info().rss / 1024 / 1024  # MB
        
        # Executar fun√ß√£o
        start_time = time.perf_counter()
        result = func(*args, **kwargs)
        end_time = time.perf_counter()
        
        # Mem√≥ria final
        mem_after = process.memory_info().rss / 1024 / 1024  # MB
        
        return {
            'result': result,
            'execution_time': end_time - start_time,
            'memory_before_mb': mem_before,
            'memory_after_mb': mem_after,
            'memory_delta_mb': mem_after - mem_before
        }


class TestPerformanceServidorWeb(PerformanceTestCase):
    """Testes de performance para o WebServerManager."""
    
    def setUp(self):
        """Configura√ß√£o inicial."""
        self.temp_dir = tempfile.mkdtemp()
        self.addCleanup(shutil.rmtree, self.temp_dir)
        
        # Criar arquivo HTML simples
        (Path(self.temp_dir) / "index.html").write_text(
            "<html><body><h1>Teste Performance</h1></body></html>",
            encoding='utf-8'
        )
        
        self.config = ConfiguracaoServidorWeb(
            porta_preferencial=8120,
            portas_alternativas=[8121, 8122, 8123],
            diretorio_html=self.temp_dir,
            modo_debug=False  # Desabilitar debug para performance
        )
    
    def test_performance_inicializacao_servidor(self):
        """Testa performance da inicializa√ß√£o do servidor."""
        def inicializar_servidor():
            manager = WebServerManager(self.config)
            url = manager.iniciar_servidor()
            manager.parar_servidor()
            return url
        
        # Medir m√∫ltiplas inicializa√ß√µes
        stats = self.measure_multiple_executions(inicializar_servidor, iterations=5)
        
        # Inicializa√ß√£o deve ser r√°pida (< 1 segundo)
        self.assert_performance_threshold(
            stats['mean'], 1.0,
            f"Inicializa√ß√£o muito lenta. M√©dia: {stats['mean']:.3f}s"
        )
        
        # Variabilidade deve ser baixa
        self.assertLess(stats['std_dev'], 0.5, "Variabilidade muito alta na inicializa√ß√£o")
        
        print(f"üìä Performance Inicializa√ß√£o Servidor:")
        print(f"   M√©dia: {stats['mean']:.3f}s")
        print(f"   Mediana: {stats['median']:.3f}s")
        print(f"   Min/Max: {stats['min']:.3f}s / {stats['max']:.3f}s")
        print(f"   Desvio Padr√£o: {stats['std_dev']:.3f}s")
    
    def test_performance_descoberta_porta(self):
        """Testa performance da descoberta de portas dispon√≠veis."""
        manager = WebServerManager(self.config)
        
        def encontrar_porta():
            return manager._encontrar_porta_disponivel()
        
        # Medir descoberta de porta
        stats = self.measure_multiple_executions(encontrar_porta, iterations=20)
        
        # Descoberta deve ser muito r√°pida (< 100ms)
        self.assert_performance_threshold(
            stats['mean'], 0.1,
            f"Descoberta de porta muito lenta. M√©dia: {stats['mean']:.3f}s"
        )
        
        print(f"üìä Performance Descoberta de Porta:")
        print(f"   M√©dia: {stats['mean']*1000:.1f}ms")
        print(f"   Mediana: {stats['median']*1000:.1f}ms")
        print(f"   Min/Max: {stats['min']*1000:.1f}ms / {stats['max']*1000:.1f}ms")
    
    def test_performance_servir_arquivos_concorrente(self):
        """Testa performance ao servir arquivos com m√∫ltiplas requisi√ß√µes."""
        manager = WebServerManager(self.config)
        url = manager.iniciar_servidor()
        
        try:
            time.sleep(0.2)  # Aguardar servidor estar pronto
            
            def fazer_requisicao():
                import urllib.request
                with urllib.request.urlopen(f"{url}/index.html", timeout=5) as response:
                    return response.read()
            
            # Teste sequencial
            stats_seq = self.measure_multiple_executions(fazer_requisicao, iterations=10)
            
            # Teste concorrente
            def teste_concorrente():
                threads = []
                results = []
                start_time = time.perf_counter()
                
                def worker():
                    try:
                        result = fazer_requisicao()
                        results.append(len(result))
                    except Exception as e:
                        results.append(0)
                
                # Criar 10 threads simult√¢neas
                for _ in range(10):
                    thread = threading.Thread(target=worker)
                    threads.append(thread)
                    thread.start()
                
                # Aguardar conclus√£o
                for thread in threads:
                    thread.join()
                
                end_time = time.perf_counter()
                return end_time - start_time, len([r for r in results if r > 0])
            
            total_time, successful_requests = teste_concorrente()
            
            # Verificar performance
            self.assertEqual(successful_requests, 10, "Nem todas as requisi√ß√µes foram bem-sucedidas")
            self.assertLess(total_time, 2.0, f"Requisi√ß√µes concorrentes muito lentas: {total_time:.2f}s")
            
            print(f"üìä Performance Servir Arquivos:")
            print(f"   Sequencial - M√©dia: {stats_seq['mean']*1000:.1f}ms")
            print(f"   Concorrente - Total: {total_time:.2f}s para 10 requisi√ß√µes")
            print(f"   Concorrente - M√©dia por requisi√ß√£o: {total_time/10*1000:.1f}ms")
            
        finally:
            manager.parar_servidor()
    
    def test_uso_memoria_servidor(self):
        """Testa uso de mem√≥ria do servidor."""
        def criar_e_usar_servidor():
            manager = WebServerManager(self.config)
            url = manager.iniciar_servidor()
            
            # Simular uso por um tempo
            time.sleep(0.5)
            
            manager.parar_servidor()
            return url
        
        # Medir uso de mem√≥ria
        memory_stats = self.measure_memory_usage(criar_e_usar_servidor)
        
        # Uso de mem√≥ria deve ser razo√°vel (< 50MB de delta)
        self.assertLess(
            memory_stats['memory_delta_mb'], 50,
            f"Uso de mem√≥ria muito alto: {memory_stats['memory_delta_mb']:.1f}MB"
        )
        
        print(f"üìä Uso de Mem√≥ria Servidor:")
        print(f"   Antes: {memory_stats['memory_before_mb']:.1f}MB")
        print(f"   Depois: {memory_stats['memory_after_mb']:.1f}MB")
        print(f"   Delta: {memory_stats['memory_delta_mb']:.1f}MB")


class TestPerformanceSincronizacao(PerformanceTestCase):
    """Testes de performance para sincroniza√ß√£o de dados."""
    
    def setUp(self):
        """Configura√ß√£o inicial."""
        self.temp_dir = tempfile.mkdtemp()
        self.addCleanup(shutil.rmtree, self.temp_dir)
        
        self.arquivo_sync = str(Path(self.temp_dir) / "sync_performance.json")
        
        # Criar arquivo inicial
        with open(self.arquivo_sync, 'w') as f:
            json.dump({"dados": {}}, f)
        
        self.json_provider = JSONDataProvider(arquivo_json=self.arquivo_sync)
        self.sync_manager = DataSyncManager(self.json_provider)
    
    def tearDown(self):
        """Limpeza."""
        if hasattr(self, 'sync_manager'):
            self.sync_manager.finalizar()
    
    def test_latencia_sincronizacao_simples(self):
        """Testa lat√™ncia de sincroniza√ß√£o para dados simples."""
        def sincronizar_dados_simples():
            dados = {
                "timestamp": datetime.now().isoformat(),
                "contador": 1,
                "status": "ativo"
            }
            self.sync_manager.atualizar_dados(dados)
            time.sleep(0.05)  # Aguardar debounce m√≠nimo
        
        # Medir lat√™ncia
        stats = self.measure_multiple_executions(sincronizar_dados_simples, iterations=20)
        
        # Lat√™ncia deve ser baixa (< 100ms incluindo debounce)
        self.assert_performance_threshold(
            stats['mean'], 0.1,
            f"Lat√™ncia de sincroniza√ß√£o muito alta. M√©dia: {stats['mean']*1000:.1f}ms"
        )
        
        print(f"üìä Lat√™ncia Sincroniza√ß√£o Simples:")
        print(f"   M√©dia: {stats['mean']*1000:.1f}ms")
        print(f"   Mediana: {stats['median']*1000:.1f}ms")
        print(f"   Min/Max: {stats['min']*1000:.1f}ms / {stats['max']*1000:.1f}ms")
    
    def test_performance_dados_complexos(self):
        """Testa performance com dados complexos."""
        def sincronizar_dados_complexos():
            dados = {
                "time_tracker": {
                    "tempo_decorrido": 3600,
                    "esta_executando": True,
                    "projeto_atual": "Projeto Complexo",
                    "historico": [
                        {"data": "2024-01-01", "tempo": 7200},
                        {"data": "2024-01-02", "tempo": 6400},
                        {"data": "2024-01-03", "tempo": 8100}
                    ]
                },
                "flowchart": {
                    "workflow_ativo": "Desenvolvimento",
                    "progresso": 65.5,
                    "estagios": [
                        {"nome": "Planejamento", "concluido": True, "tempo": 1800},
                        {"nome": "Desenvolvimento", "concluido": False, "tempo": 5400},
                        {"nome": "Testes", "concluido": False, "tempo": 0}
                    ]
                },
                "notificacoes": {
                    "total": 15,
                    "nao_lidas": 3,
                    "lista": [
                        {"id": 1, "titulo": "Notifica√ß√£o 1", "lida": False},
                        {"id": 2, "titulo": "Notifica√ß√£o 2", "lida": True},
                        {"id": 3, "titulo": "Notifica√ß√£o 3", "lida": False}
                    ]
                },
                "metadata": {
                    "versao": "1.0.0",
                    "timestamp": datetime.now().isoformat(),
                    "fonte": "TopSidebarContainer"
                }
            }
            self.sync_manager.atualizar_dados(dados)
            time.sleep(0.05)  # Aguardar debounce
        
        # Medir performance com dados complexos
        stats = self.measure_multiple_executions(sincronizar_dados_complexos, iterations=10)
        
        # Mesmo com dados complexos, deve ser r√°pido (< 200ms)
        self.assert_performance_threshold(
            stats['mean'], 0.2,
            f"Performance com dados complexos inadequada. M√©dia: {stats['mean']*1000:.1f}ms"
        )
        
        print(f"üìä Performance Dados Complexos:")
        print(f"   M√©dia: {stats['mean']*1000:.1f}ms")
        print(f"   Tamanho m√©dio do arquivo: {self._get_file_size_kb():.1f}KB")
    
    def test_performance_multiplas_atualizacoes_rapidas(self):
        """Testa performance com m√∫ltiplas atualiza√ß√µes r√°pidas (debouncing)."""
        def multiplas_atualizacoes():
            start_time = time.perf_counter()
            
            # Fazer 50 atualiza√ß√µes r√°pidas
            for i in range(50):
                dados = {
                    "contador": i,
                    "timestamp": datetime.now().isoformat()
                }
                self.sync_manager.atualizar_dados(dados)
                time.sleep(0.001)  # 1ms entre atualiza√ß√µes
            
            # Aguardar debounce final
            time.sleep(0.2)
            
            end_time = time.perf_counter()
            return end_time - start_time
        
        # Medir performance
        total_time = multiplas_atualizacoes()
        
        # Debouncing deve otimizar para menos de 1 segundo total
        self.assertLess(total_time, 1.0, f"Debouncing ineficiente: {total_time:.2f}s")
        
        # Verificar se apenas a √∫ltima atualiza√ß√£o foi salva
        with open(self.arquivo_sync, 'r') as f:
            dados_finais = json.load(f)
        
        self.assertEqual(dados_finais['dados']['contador'], 49)  # √öltima atualiza√ß√£o
        
        print(f"üìä Performance M√∫ltiplas Atualiza√ß√µes:")
        print(f"   Tempo total para 50 atualiza√ß√µes: {total_time:.2f}s")
        print(f"   Tempo m√©dio por atualiza√ß√£o: {total_time/50*1000:.1f}ms")
    
    def test_performance_concorrencia_sincronizacao(self):
        """Testa performance com sincroniza√ß√£o concorrente."""
        def worker_thread(thread_id, num_updates):
            for i in range(num_updates):
                dados = {
                    "thread_id": thread_id,
                    "update": i,
                    "timestamp": datetime.now().isoformat()
                }
                self.sync_manager.atualizar_dados(dados)
                time.sleep(0.01)  # 10ms entre atualiza√ß√µes
        
        # Teste concorrente
        start_time = time.perf_counter()
        
        threads = []
        for thread_id in range(5):
            thread = threading.Thread(target=worker_thread, args=(thread_id, 10))
            threads.append(thread)
            thread.start()
        
        # Aguardar conclus√£o
        for thread in threads:
            thread.join()
        
        # Aguardar debounce final
        time.sleep(0.2)
        
        end_time = time.perf_counter()
        total_time = end_time - start_time
        
        # 50 atualiza√ß√µes concorrentes devem completar em tempo razo√°vel
        self.assertLess(total_time, 3.0, f"Sincroniza√ß√£o concorrente muito lenta: {total_time:.2f}s")
        
        print(f"üìä Performance Sincroniza√ß√£o Concorrente:")
        print(f"   Tempo total: {total_time:.2f}s")
        print(f"   50 atualiza√ß√µes em 5 threads")
    
    def test_uso_memoria_sincronizacao(self):
        """Testa uso de mem√≥ria durante sincroniza√ß√£o."""
        def sincronizacao_intensiva():
            # Fazer muitas sincroniza√ß√µes
            for i in range(100):
                dados = {
                    "iteracao": i,
                    "dados_grandes": "x" * 1000,  # 1KB de dados por itera√ß√£o
                    "timestamp": datetime.now().isoformat()
                }
                self.sync_manager.atualizar_dados(dados)
                
                if i % 10 == 0:
                    time.sleep(0.01)  # Pequena pausa a cada 10 itera√ß√µes
            
            # Aguardar debounce final
            time.sleep(0.2)
        
        # Medir uso de mem√≥ria
        memory_stats = self.measure_memory_usage(sincronizacao_intensiva)
        
        # Uso de mem√≥ria deve ser controlado (< 20MB de delta)
        self.assertLess(
            memory_stats['memory_delta_mb'], 20,
            f"Vazamento de mem√≥ria detectado: {memory_stats['memory_delta_mb']:.1f}MB"
        )
        
        print(f"üìä Uso de Mem√≥ria Sincroniza√ß√£o:")
        print(f"   Delta: {memory_stats['memory_delta_mb']:.1f}MB")
        print(f"   Tempo execu√ß√£o: {memory_stats['execution_time']:.2f}s")
    
    def _get_file_size_kb(self):
        """Obt√©m o tamanho do arquivo de sincroniza√ß√£o em KB."""
        try:
            return os.path.getsize(self.arquivo_sync) / 1024
        except OSError:
            return 0


class TestPerformanceWebView(PerformanceTestCase):
    """Testes de performance para WebViewComponent."""
    
    def setUp(self):
        """Configura√ß√£o inicial."""
        self.mock_page = Mock()
        self.mock_page.update = Mock()
        self.url_teste = "http://localhost:8080"
    
    def test_performance_criacao_webview(self):
        """Testa performance da cria√ß√£o do WebView."""
        def criar_webview():
            with patch('views.components.webview_component.ft.WebView') as mock_webview:
                mock_webview.return_value = Mock()
                component = WebViewComponent(
                    page=self.mock_page,
                    url_servidor=self.url_teste
                )
                return component
        
        # Medir cria√ß√£o
        stats = self.measure_multiple_executions(criar_webview, iterations=10)
        
        # Cria√ß√£o deve ser r√°pida (< 100ms)
        self.assert_performance_threshold(
            stats['mean'], 0.1,
            f"Cria√ß√£o do WebView muito lenta. M√©dia: {stats['mean']*1000:.1f}ms"
        )
        
        print(f"üìä Performance Cria√ß√£o WebView:")
        print(f"   M√©dia: {stats['mean']*1000:.1f}ms")
    
    def test_performance_atualizacao_dados_webview(self):
        """Testa performance da atualiza√ß√£o de dados no WebView."""
        with patch('views.components.webview_component.ft.WebView') as mock_webview:
            mock_webview_instance = Mock()
            mock_webview.return_value = mock_webview_instance
            
            component = WebViewComponent(
                page=self.mock_page,
                url_servidor=self.url_teste
            )
            
            def atualizar_dados():
                dados = {
                    "time_tracker": {"tempo": 3600, "ativo": True},
                    "notificacoes": {"total": 5, "nao_lidas": 2},
                    "timestamp": datetime.now().isoformat()
                }
                component.notificar_atualizacao_dados(dados)
            
            # Medir atualiza√ß√µes
            stats = self.measure_multiple_executions(atualizar_dados, iterations=50)
            
            # Atualiza√ß√µes devem ser muito r√°pidas (< 10ms)
            self.assert_performance_threshold(
                stats['mean'], 0.01,
                f"Atualiza√ß√£o de dados muito lenta. M√©dia: {stats['mean']*1000:.1f}ms"
            )
            
            print(f"üìä Performance Atualiza√ß√£o Dados WebView:")
            print(f"   M√©dia: {stats['mean']*1000:.1f}ms")
            print(f"   Total de chamadas JavaScript: {mock_webview_instance.evaluate_javascript.call_count}")


class TestPerformanceIntegracaoCompleta(PerformanceTestCase):
    """Testes de performance para integra√ß√£o completa do sistema."""
    
    def setUp(self):
        """Configura√ß√£o inicial."""
        self.temp_dir = tempfile.mkdtemp()
        self.addCleanup(shutil.rmtree, self.temp_dir)
        
        # Criar estrutura web b√°sica
        (Path(self.temp_dir) / "index.html").write_text(
            "<html><body>Performance Test</body></html>",
            encoding='utf-8'
        )
        
        self.config = ConfiguracaoServidorWeb(
            porta_preferencial=8130,
            portas_alternativas=[8131, 8132],
            diretorio_html=self.temp_dir,
            arquivo_sincronizacao=str(Path(self.temp_dir) / "sync.json"),
            intervalo_debounce=0.05,  # Debounce r√°pido para testes
            modo_debug=False
        )
    
    def test_performance_fluxo_completo(self):
        """Testa performance do fluxo completo servidor ‚Üí sync ‚Üí WebView."""
        def fluxo_completo():
            # 1. Inicializar servidor
            server_manager = WebServerManager(self.config)
            url = server_manager.iniciar_servidor()
            
            # 2. Inicializar sincroniza√ß√£o
            json_provider = JSONDataProvider(arquivo_json=self.config.arquivo_sincronizacao)
            sync_manager = DataSyncManager(json_provider)
            
            # 3. Criar WebView (mockado)
            with patch('views.components.webview_component.ft.WebView') as mock_webview:
                mock_webview.return_value = Mock()
                webview = WebViewComponent(
                    page=Mock(),
                    url_servidor=url
                )
                
                # 4. Simular ciclo completo de atualiza√ß√£o
                dados = {
                    "teste_performance": True,
                    "timestamp": datetime.now().isoformat()
                }
                
                # Sincronizar dados
                sync_manager.atualizar_dados(dados)
                time.sleep(0.1)  # Aguardar debounce
                
                # Atualizar WebView
                webview.notificar_atualizacao_dados(dados)
                
                # 5. Cleanup
                server_manager.parar_servidor()
                sync_manager.finalizar()
                
                return url
        
        # Medir fluxo completo
        stats = self.measure_multiple_executions(fluxo_completo, iterations=3)
        
        # Fluxo completo deve ser razoavelmente r√°pido (< 2 segundos)
        self.assert_performance_threshold(
            stats['mean'], 2.0,
            f"Fluxo completo muito lento. M√©dia: {stats['mean']:.2f}s"
        )
        
        print(f"üìä Performance Fluxo Completo:")
        print(f"   M√©dia: {stats['mean']:.2f}s")
        print(f"   Min/Max: {stats['min']:.2f}s / {stats['max']:.2f}s")
    
    def test_throughput_sistema_completo(self):
        """Testa throughput do sistema completo."""
        # Inicializar componentes
        server_manager = WebServerManager(self.config)
        url = server_manager.iniciar_servidor()
        
        json_provider = JSONDataProvider(arquivo_json=self.config.arquivo_sincronizacao)
        sync_manager = DataSyncManager(json_provider)
        
        try:
            # Medir throughput de atualiza√ß√µes
            start_time = time.perf_counter()
            num_updates = 100
            
            for i in range(num_updates):
                dados = {
                    "update_id": i,
                    "timestamp": datetime.now().isoformat(),
                    "data": f"update_{i}"
                }
                sync_manager.atualizar_dados(dados)
                
                # Pequena pausa para n√£o sobrecarregar
                if i % 10 == 0:
                    time.sleep(0.01)
            
            # Aguardar debounce final
            time.sleep(0.2)
            
            end_time = time.perf_counter()
            total_time = end_time - start_time
            
            throughput = num_updates / total_time
            
            # Throughput deve ser razo√°vel (> 50 updates/segundo)
            self.assertGreater(
                throughput, 50,
                f"Throughput muito baixo: {throughput:.1f} updates/s"
            )
            
            print(f"üìä Throughput Sistema Completo:")
            print(f"   {num_updates} atualiza√ß√µes em {total_time:.2f}s")
            print(f"   Throughput: {throughput:.1f} updates/segundo")
            
        finally:
            server_manager.parar_servidor()
            sync_manager.finalizar()


if __name__ == '__main__':
    print("üöÄ Executando Testes de Performance do Servidor Web Integrado")
    print("=" * 60)
    
    # Configurar logging m√≠nimo para performance
    import logging
    logging.basicConfig(level=logging.ERROR)
    
    # Executar testes com verbosidade
    unittest.main(verbosity=2)